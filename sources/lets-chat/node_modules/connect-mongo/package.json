{
  "name": "connect-mongo",
  "version": "0.7.0",
  "description": "MongoDB session store for Express and Connect",
  "keywords": [
    "connect",
    "mongo",
    "mongodb",
    "session",
    "express"
  ],
  "author": {
    "name": "Casey Banner",
    "email": "kcbanner@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kcbanner/connect-mongo.git"
  },
  "bugs": {
    "url": "https://github.com/kcbanner/connect-mongo/issues"
  },
  "dependencies": {
    "debug": ">= 0.7.0",
    "depd": ">= 0.4.0",
    "lodash": "*",
    "mongodb": ">= 1.2.0 <2.1.0"
  },
  "devDependencies": {
    "express-session": ">= 1.0.0",
    "grunt-contrib-jshint": "~0.10.0",
    "jshint-stylish": "~1.0.0",
    "mocha": "~2.1.0",
    "mongoose": ">= 2.6.0 < 4.0.0"
  },
  "scripts": {
    "test": "grunt && make test"
  },
  "main": "./lib/connect-mongo",
  "readme": "# connect-mongo\n\nMongoDB session store for [Connect](https://github.com/senchalabs/connect) and [Express](http://expressjs.com/)\n\n[![Build Status](https://travis-ci.org/kcbanner/connect-mongo.svg?branch=master)](https://travis-ci.org/kcbanner/connect-mongo) [![Dependency Status](https://david-dm.org/kcbanner/connect-mongo.svg?style=flat)](https://david-dm.org/kcbanner/connect-mongo)\n\n## Compatibility\n\n* Support Express `4.x`, `5.0` and Connect `3.x` through [express-session](https://github.com/expressjs/session)\n* Support Express `2.x`, `3.x` and Connect `>= 1.0.3`, `2.x`\n* Support [Mongoose](http://mongoosejs.com/index.html) `>= 2.6` and `3.x`\n* Support [native MongoDB driver](http://mongodb.github.io/node-mongodb-native/) `>= 1.2` and `2.0`\n* Support Node.js `0.8`, `0.10` and `0.11`\n\n## Usage\n\n### Express or Connect integration\n\nExpress `4.x`, `5.0` and Connect `3.x`:\n\n```js\nvar session = require('express-session');\nvar MongoStore = require('connect-mongo')(session);\n\napp.use(session({\n    secret: 'foo',\n    store: new MongoStore(options)\n}));\n```\n\nExpress `2.x`, `3.x` and Connect `1.x`, `2.x`:\n\n```js\nvar MongoStore = require('connect-mongo')(express);\n\napp.use(express.session({\n    secret: 'foo',\n    store: new MongoStore(options)\n}));\n```\n\nFor Connect `1.x` and `2.x`, just replace `express` by `connect`.\n\n### Connection to MongoDB\n\nIn many circumstances, `connect-mongo` will not be the only part of your application which need a connection to a MongoDB database. It could be interesting to re-use an existing connection.\n\nAlternatively, you can configure `connect-mongo` to establish a new connection.\n\n#### Re-use a Mongoose connection\n\n```js\nvar mongoose = require('mongoose');\n\n// Basic usage\nmongoose.connect(connectionOptions);\n\napp.use(session({\n    store: new MongoStore({ mongooseConnection: mongoose.connection })\n}));\n\n// Advanced usage\nvar connection = mongoose.createConnection(connectionOptions);\n\napp.use(session({\n    store: new MongoStore({ mongooseConnection: connection })\n}));\n```\n\n#### Re-use a native MongoDB driver connection\n\nIn this case, you juste have to give your `Db` instance to `connect-mongo`.\nIf the connection is not opened, `connect-mongo` will do it for you.\n\n```js\n/*\n** There are many ways to create dbInstance.\n** You should refer to the driver documentation.\n*/\n\napp.use(session({\n    store: new MongoStore({ db: dbInstance })\n}));\n```\n\n#### Create a new connection from a MongoDB connection string\n\n[MongoDB connection strings](http://docs.mongodb.org/manual/reference/connection-string/) are __the best way__ to configure a new connection. For advanced usage, [more options](http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html#mongoclient-connect-options) can be configured with `mongoOptions` property.\n\n```js\n// Basic usage\napp.use(session({\n    store: new MongoStore({ url: 'mongodb://localhost/test-app' })\n}));\n\n// Advanced usage\napp.use(session({\n    store: new MongoStore({\n        url: 'mongodb://user12345:foobar@localhost/test-app?authSource=admins&w=1',\n        mongoOptions: advancedOptions // See below for details\n    })\n}));\n```\n\n#### Create a new connection from legacy options\n\nFor compatibility purpose, `connect-mongo` can create a basic connection string and set some options for you.\n\nYou can't use `mongoOptions` if you choose this mode.\n\n```js\napp.use(session({\n    store: new MongoStore({\n        // Basic usage\n        host: 'localhost', // Default, optional\n        port: 27017, // Default, optional\n        db: 'test-app', // Required\n\n        // Basic authentication (optional)\n        username: 'user12345',\n        password: 'foobar',\n\n        // Advanced options (optional)\n        autoReconnect: true, // Default\n        w: 1, // Default,\n        ssl: false // Default\n    })\n}));\n```\n\n## Session expiration\n\nWhen the session cookie has an expiration date, `connect-mongo` will use it.\n\nOtherwise, it will create a new one, using `ttl` option.\n\n```js\napp.use(session({\n    store: new MongoStore({\n      url: 'mongodb://localhost/test-app',\n      ttl: 14 * 24 * 60 * 60 // = 14 days. Default\n    })\n}));\n```\n\n__Note:__ Each time an user interacts with the server, its session expiration date is refreshed.\n\n## Remove expired sessions\n\nBy default, `connect-mongo` uses MongoDB's TTL collection feature (2.2+) to have mongod automatically remove expired sessions. But you can change this behavior.\n\n### Set MongoDB to clean expired sessions (default mode)\n\n`connect-mongo` will creates a TTL index for you at startup. You MUST have MongoDB 2.2+ and administration permissions.\n\n```js\napp.use(session({\n    store: new MongoStore({\n      url: 'mongodb://localhost/test-app',\n      autoRemove: 'native' // Default\n    })\n}));\n```\n\n__Note:__ If you use `connect-mongo` in a very concurrent environment, you should avoid this mode and prefer setting the index yourself, once!\n\n### Set the compatibility mode\n\nYou have an older MongoDB version (compatible with connect-mongo) or you can't or don't want to create a TTL index.\n\n`connect-mongo` will take care of removing expired sessions, using defined interval.\n\n```js\napp.use(session({\n    store: new MongoStore({\n      url: 'mongodb://localhost/test-app',\n      autoRemove: 'interval',\n      autoRemoveInterval: 10 // In minutes. Default\n    })\n}));\n```\n\n### Disable expired sessions cleaning\n\nYou are in production environnement and/or you manage the TTL index elsewhere.\n\n```js\napp.use(session({\n    store: new MongoStore({\n      url: 'mongodb://localhost/test-app',\n      autoRemove: 'disabled'\n    })\n}));\n```\n\n## More options\n\n  - `collection` Collection (default: `sessions`)\n  - `stringify` If true, connect-mongo will serialize sessions using `JSON.stringify` before\n                setting them, and deserialize them with `JSON.parse` when getting them.\n                (optional, default: true). This is useful if you are using types that\n                MongoDB doesn't support.\n  - `serialize` Custom hook for serializing sessions to MongoDB. This is helpful if you need\n                to modify the session before writing it out.\n  - `unserialize` Custom hook for unserializing sessions from MongoDB. This can be used in\n                scenarios where you need to support different types of serializations\n                (e.g., objects and JSON strings) or need to modify the session before using\n                it in your app.\n  - `hash` (optional) Hash is an object, which will determine wether hash the sid in mongo, since it's not undefined, means sid will be hashed\n  - `hash.salt` Salt will be used to hash the sid in mongo, default salt is \"connect-mongo\"\n  - `hash.algorithm` Hash algorithm, default algorithm is \"sha1\"\n\n## Tests\n\nYou need `mocha`.\n\n    make test\n\nThe tests use a database called `connect-mongo-test`.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2015 Casey Banner &lt;kcbanner@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "connect-mongo@0.7.0",
  "dist": {
    "shasum": "112632a963936db95b75ed67f715ef6cb7b027df"
  },
  "_from": "connect-mongo@^0.7.0",
  "_resolved": "https://registry.npmjs.org/connect-mongo/-/connect-mongo-0.7.0.tgz"
}
