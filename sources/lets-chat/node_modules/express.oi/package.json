{
  "name": "express.oi",
  "version": "0.0.14",
  "description": "Realtime-web library, based on express and socket.io",
  "keywords": [
    "realtime",
    "web",
    "framework",
    "express.oi",
    "express.io",
    "express",
    "socket.io",
    "badass"
  ],
  "homepage": "https://github.com/sibartlett/express.oi",
  "author": {
    "name": "Simon Bartlett",
    "email": "simon@sibartlett.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sibartlett/express.oi"
  },
  "license": "MIT",
  "dependencies": {
    "async": "^0.9.0",
    "cookie-parser": "~1.3.4",
    "express": "^4.12.3",
    "express-session": "~1.10.4",
    "lodash": "^3.6.0",
    "socket.io": "^1.3.5"
  },
  "main": "lib/index.js",
  "readme": "![express.oi](http://i.imgur.com/zzZLudd.png)\n\nThis node.js library seeks to combine [express](http://expressjs.com) and [socket.io](socket.io) into one cohesive library. This project started as a fork of [express.io](https://github.com/techpines/express.io).\n\n### Attention!\n\nI've started this project recently - so I may make breaking changes between releases, please check the README for each release for the latest documentation.\n\n### Getting started\n\nFirst install:\n\n```sh\nnpm install express.oi\n```\n\nThen, simply replace this line of code\n\n```js\nrequire('express')\n```\n\nwith this line of code\n\n```js\nrequire('express.oi')\n```\nYour app should run just the same as before! express.oi is designed to be a superset of express and socket.io.\n\n### Usage\n\n##### Setting up the app\n\n```js\nvar express = require('express.oi');\n\nvar app = express();\n\n// Pass in your express-session configuration\napp.io.session({\n  secret: 'express.oi makes me happy'\n});\n\napp.http().io();\n\napp.listen(3000);\n```\n\n##### express.oi routes\n\n```js\nvar messages = [];\n\napp.io.route('messages', {\n  // socket.io event: messages:list\n  list: function(req, res) {\n    res.json(messages);\n  },\n\n  // socket.io event: messages:add\n  add: function(req, res) {\n    // data is accessible from req.data (just like req.body, req.query)\n    var data = req.data;\n\n    // Or use req.param(key)\n    var message = {\n      text: req.param('text')\n    };\n\n    messages.push(message);\n\n    res.status(200).json(message);\n  },\n\n  // socket.io event: messages:remove\n  remove: function(req, res) {\n    // Or just send a status code\n    res.sendStatus(403);\n  }\n});\n\n```\n\n##### Forwarding express routes\n\nRegular express routes can be forwarded to express.oi routes\n\n```js\napp.route('/messages')\n  .get(function(req, res) {\n    // Forward GET /messages to messages:list\n    req.io.route('messages:list');\n  })\n  .post(function(req, res) {\n    // Forward POST /messages to messages:add\n    req.io.route('messages:add');\n  })\n  .delete(function(req, res) {\n    // Forward DELETE /messages to messages:add\n    req.io.route('messages:remove');\n  });\n```\n\n##### More API Examples\n\n```js\n// express.oi routes\napp.io.route('examples', {\n  example: function(req, res) {\n\n    // Respond to current request\n    res.status(200)\n       .json({\n         message: 'This is my response'\n       });\n\n    // You can check if current request is a websocket\n    if (!req.isSocket) {\n      return;\n    }\n\n    // Emit event to current socket\n    req.socket.emit('message', 'this is a test');\n\n    // Emit event to all clients except sender\n    req.socket.broadcast.emit('message', 'this is a test');\n\n    // sending to all clients in 'game' room(channel) except sender\n    req.socket.broadcast.to('game').emit('message', 'nice game');\n\n    // sending to individual socketid, socketid is like a room\n    req.socket.broadcast.to(socketId).emit('message', 'for your eyes only');\n\n\n    // sending to all clients, including sender\n    app.io.emit('message', 'this is a test');\n\n    // sending to all clients in 'game' room/channel, including sender\n    app.io.in('game').emit('message', 'cool game');\n  }\n});\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sibartlett/express.oi/issues"
  },
  "_id": "express.oi@0.0.14",
  "dist": {
    "shasum": "330fe647714f7da6c533e259af5cbbc1b72391d3"
  },
  "_from": "express.oi@^0.0.14",
  "_resolved": "https://registry.npmjs.org/express.oi/-/express.oi-0.0.14.tgz"
}
