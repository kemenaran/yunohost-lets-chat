{
  "name": "passport-ldapauth",
  "description": "LDAP authentication strategy for Passport",
  "author": {
    "name": "Vesa PoikajÃ¤rvi",
    "email": "vesa.poikajarvi@iki.fi"
  },
  "contributors": [
    {
      "name": "Simon Gaeremynck",
      "email": "gaeremyncks@gmail.com"
    },
    {
      "name": "Michael Bailly",
      "email": "mbailly@linagora.com"
    },
    {
      "name": "Jason Gelinas",
      "email": "jason.gelinas@citi.com"
    },
    {
      "name": "arumi",
      "email": "arumi@wge7033.secheron.net"
    }
  ],
  "keywords": [
    "ldap",
    "passport",
    "authentication",
    "ldapauth"
  ],
  "version": "0.2.6",
  "license": {
    "type": "MIT",
    "url": "https://github.com/vesse/passport-ldapauth/raw/master/LICENSE"
  },
  "main": "./lib/passport-ldapauth",
  "engines": {
    "node": ">=0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vesse/passport-ldapauth.git"
  },
  "bugs": {
    "url": "https://github.com/vesse/passport-ldapauth/issues"
  },
  "dependencies": {
    "passport-strategy": "1.x.x",
    "ldapauth-fork": "~2.2.18"
  },
  "devDependencies": {
    "body-parser": "1.10.x",
    "chai": "1.10.x",
    "express": "4.9.x",
    "ldapjs": "0.7.x",
    "mocha": "2.1.x",
    "supertest": "0.15.x",
    "passport": "~0.2.0"
  },
  "scripts": {
    "test": "NODE_PATH=lib mocha --reporter spec test/*-test.js"
  },
  "readme": "# passport-ldapauth\n\n[Passport](http://passportjs.org/) authentication strategy against LDAP server. This module is a Passport strategy wrapper for [ldapauth-fork](https://github.com/vesse/node-ldapauth-fork)\n\n## Install\n\n```\nnpm install passport-ldapauth\n```\n\n## Status\n\n[![Build Status](https://travis-ci.org/vesse/passport-ldapauth.png)](https://travis-ci.org/vesse/passport-ldapauth)\n[![Dependency Status](https://gemnasium.com/vesse/passport-ldapauth.png)](https://gemnasium.com/vesse/passport-ldapauth)\n\n## Usage\n\n### Configure strategy\n\n```javascript\nvar LdapStrategy = require('passport-ldapauth');\n\npassport.use(new LdapStrategy({\n    server: {\n      url: 'ldap://localhost:389',\n      ...\n    }\n  }));\n```\n\n* `server`: LDAP settings. These are passed directly to [ldapauth-fork](https://github.com/vesse/node-ldapauth-fork). See its documentation for all available options.\n    * `url`: e.g. `ldap://localhost:389`\n    * `bindDn`: e.g. `cn='root'`\n    * `bindCredentials`: Password for bindDn\n    * `searchBase`: e.g. `o=users,o=example.com`\n    * `searchFilter`:  LDAP search filter, e.g. `(uid={{username}})`. Use literal `{{username}}` to have the given username used in the search.\n    * `searchAttributes`: Optional array of attributes to fetch from LDAP server, e.g. `['displayName', 'mail']`. Defaults to `undefined`, i.e. fetch all attributes\n    * `tlsOptions`: Optional object with options accepted by Node.js [tls](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) module.\n* `usernameField`: Field name where the username is found, defaults to _username_\n* `passwordField`: Field name where the password is found, defaults to _password_\n* `passReqToCallback`: When `true`, `req` is the first argument to the verify callback (default: `false`):\n\n        passport.use(new LdapStrategy(..., function(req, user, done) {\n            ...\n            done(null, user);\n          }\n        ));\n\nNote: you can pass a function instead of an object as `options`, see the [example below](#options-as-function)\n\n### Authenticate requests\n\nUse `passport.authenticate()`, specifying the `'ldapauth'` strategy, to authenticate requests.\n\n#### `authenticate()` options\n\nIn addition to [default authentication options](http://passportjs.org/guide/authenticate/) the following options are available for `passport.authenticate()`:\n\n * `badRequestMessage`  flash message for missing username/password (default: 'Missing credentials')\n * `invalidCredentials`  flash message for `InvalidCredentialsError`, `NoSuchObjectError`, and `/no such user/i` LDAP errors (default: 'Invalid username/password')\n * `userNotFound`  flash message when LDAP returns no error but also no user (default: 'Invalid username/password')\n * `constraintViolation`  flash message when user account is locked (default: 'Exceeded password retry limit, account locked')\n\n## Express example\n\n```javascript\nvar express      = require('express'),\n    passport     = require('passport'),\n    bodyParser   = require('body-parser'),\n    LdapStrategy = require('passport-ldapauth');\n\nvar OPTS = {\n  server: {\n    url: 'ldap://localhost:389',\n    bindDn: 'cn=root',\n    bindCredentials: 'secret',\n    searchBase: 'ou=passport-ldapauth',\n    searchFilter: '(uid={{username}})'\n  }\n};\n\nvar app = express();\n\npassport.use(new LdapStrategy(OPTS));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(passport.initialize());\n\napp.post('/login', passport.authenticate('ldapauth', {session: false}), function(req, res) {\n  res.send({status: 'ok'});\n});\n\napp.listen(8080);\n```\n\n### Active Directory over SSL example\n\nSimple example config for connecting over `ldaps://` to a server requiring some internal CA certificate (often the case in corporations using Windows AD).\n\n```javascript\nvar fs = require('fs');\n\nvar opts = {\n  server: {\n    url: 'ldaps://ad.corporate.com:636',\n    bindDn: 'cn=non-person,ou=system,dc=corp,dc=corporate,dc=com',\n    bindCredentials: 'secret',\n    searchBase: 'dc=corp,dc=corporate,dc=com',\n    searchFilter: '(&(objectcategory=person)(objectclass=user)(|(samaccountname={{username}})(mail={{username}})))',\n    searchAttributes: ['displayName', 'mail'],\n    tlsOptions: {\n      ca: [\n        fs.readFileSync('/path/to/root_ca_cert.crt')\n      ]\n    }\n  }\n};\n...\n```\n\n<a name=\"options-as-function\"></a>\n## Asynchronous configuration retrieval\n\nInstead of providing a static configuration object, you can pass a function as `options` that will take care of fetching the configuration. It will be called with the and a callback function having the standard `(err, result)` signature. Notice that the provided function will be called on every authenticate request.\n\n```javascript\nvar getLDAPConfiguration = function(req, callback) {\n  // Fetching things from database or whatever\n  process.nextTick(function() {\n    var opts = {\n      server: {\n        url: 'ldap://localhost:389',\n        bindDn: 'cn=root',\n        bindCredentials: 'secret',\n        searchBase: 'ou=passport-ldapauth',\n        searchFilter: '(uid={{username}})'\n      }\n    };\n\n    callback(null, opts);\n  });\n};\n\nvar LdapStrategy = require('passport-ldapauth');\n\npassport.use(new LdapStrategy(getLDAPConfiguration,\n  function(user, done) {\n    ...\n    return done(null, user);\n  }\n));\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "passport-ldapauth@0.2.6",
  "_from": "passport-ldapauth@^0.2.3"
}
