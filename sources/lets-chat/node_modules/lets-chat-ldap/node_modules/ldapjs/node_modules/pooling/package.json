{
  "name": "pooling",
  "description": "General purpose resource pool API",
  "version": "0.4.6",
  "author": {
    "name": "Mark Cavage",
    "email": "mcavage@gmail.com"
  },
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/mcavage/node-pooling.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "assert-plus": "0.1.5",
    "bunyan": "0.22.1",
    "once": "1.3.0",
    "vasync": "1.4.0",
    "dtrace-provider": "0.2.8"
  },
  "optionalDependencies": {
    "dtrace-provider": "0.2.8"
  },
  "devDependencies": {
    "cover": "0.2.9",
    "nodeunit": "0.8.1"
  },
  "scripts": {
    "test": "./node_modules/.bin/nodeunit ./test/*.test.js | ./node_modules/.bin/bunyan"
  },
  "readme": "# Overview\n\n[pooling](https://github.com/mcavage/node-pooling) is a small general purpose\nresource pooling library.  It is heavily inspired from\n[James Cooper's](http://bitmechanic.com/) excellent\n[generic-pool](https://github.com/coopernurse/node-pool) library.  This library\nwas written after using that library for some time and desiring extra\nfunctionality (namely watching events and health checking).\n\n# Usage\n\n    var EventEmitter = require('events').EventEmitter;\n    var pooling = require('pooling');\n\n    var pool = pooling.createPool({\n            checkInterval: 30000, // 30s (default is 30s)\n            max: 10,              // Default is 1\n            maxIdleTime: 120000,  // 2m (default is 1 hour)\n            name: 'my pool',\n\n            // Health check. Call the callback with an Error if you want\n            // to indicate this client should die. destroy will still be\n            // called (i.e., don't \"double free\").\n            //\n            // This function is called when an object is unused for\n            // >= maxIdleTime.  If you don't provide a check function,\n            // the default behavior is to mark the client for death.\n            check: function check(client, callback) {\n                    if ((client.id % 2) !== 0)\n                                return callback(new Error());\n\n                    return callback(null);\n            },\n\n            // callback is of the form function (err, client).\n            create: function create(callback) {\n                    var client = new EventEmitter();\n                    client.id = Math.floor(Math.random() * 1000);\n                    return callback(null, client);\n            },\n\n            // destroy is for you to do cleanup with; the pool will have already\n            // discarded the object (hence no callback)\n            destroy: function destroy(client) {\n                    client.was = client.id;\n                    client.id = -1;\n            }\n        });\n\n        pool.on('create', function (client) {\n                console.log('client %d created', client.id);\n        });\n\n        pool.on('death', function (client) {\n                console.log('client %d was killed', client.was);\n        });\n\n        pool.on('drain', function () {\n                console.log('pool has no backlog or outstanding clients');\n        });\n\n        pool.acquire(function (err, client) {\n                if (err) {\n                        console.error('Unable to acquire: %s', err.stack);\n                        process.exit(1);\n                }\n\n                pool.release(client);\n                client.emit('error', new Error('die now'));\n        });\n\n        // Gracefully block future acquire calls and wait for clients to be\n        // released\n        pool.shutdown(function () {\n                console.log('done');\n                process.exit(0);\n        });\n\nBy default the pool will remove clients on `close`, `end`, `error` and `timeout`\nevents.  You can override this by passing in an `events` array at pool creation\ntime.  You can also pass in a [Bunyan](https://github.com/trentm/node-bunyan)\n`Logger` - `pooling` logs everything at the `trace` level.\n\n# Install\n\n        npm install pooling\n\n# Development\n\nTo run unit tests and lint/style checks, just run:\n\n        make prepush\n\nYou can generate coverage data by running:\n\n        make cover\n\nAnd opening `./cover_data/index.html`.\n\n\n# License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Mark Cavage\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mcavage/node-pooling/issues"
  },
  "_id": "pooling@0.4.6",
  "_from": "pooling@0.4.6"
}
