{
  "name": "passport.socketio",
  "version": "3.5.1",
  "description": "access passport.js authenticated user information from socket.io",
  "main": "lib/index.js",
  "keywords": [
    "socket",
    "socket.io",
    "passport"
  ],
  "author": {
    "name": "JosÃ© F. Romaniello",
    "email": "jfromaniello@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jfromaniello/passport.socketio.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "license": "MIT",
  "dependencies": {
    "passport": "~0.2.0",
    "xtend": "^4.0.0"
  },
  "devDependencies": {
    "body-parser": "~1.12.2",
    "connect": "~2.7.11",
    "cookie-parser": "~1.3.4",
    "express": "~4.12.3",
    "express-session": "~1.10.4",
    "mocha": "~1.9.0",
    "passport-local": "~1.0.0",
    "request": "~2.19.0",
    "should": "~1.2.2",
    "socket.io": "~0.9.14",
    "socket.io-client": "git+https://github.com/jfromaniello/socket.io-client.git",
    "xmlhttprequest": "~1.5.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/jfromaniello/passport.socketio.svg)](https://travis-ci.org/jfromaniello/passport.socketio)\n\n# passport.socketio\n\n> Access [passport.js](http://passportjs.org) user information from a [socket.io](http://socket.io) connection.\n\n\n## Installation\n\n```\nnpm install passport.socketio\n```\n\n## Example usage\n\n\n```javascript\n\n// initialize our modules\nvar io               = require(\"socket.io\")(server),\n    sessionStore     = require('awesomeSessionStore'), // find a working session store (have a look at the readme)\n    passportSocketIo = require(\"passport.socketio\");\n\n// With Socket.io < 1.0\nio.set('authorization', passportSocketIo.authorize({\n  cookieParser: express.cookieParser,\n  key:         'express.sid',       // the name of the cookie where express/connect stores its session_id\n  secret:      'session_secret',    // the session_secret to parse the cookie\n  store:       sessionStore,        // we NEED to use a sessionstore. no memorystore please\n  success:     onAuthorizeSuccess,  // *optional* callback on success - read more below\n  fail:        onAuthorizeFail,     // *optional* callback on fail/error - read more below\n}));\n\n//With Socket.io >= 1.0\nio.use(passportSocketIo.authorize({\n  cookieParser: cookieParser,       // the same middleware you registrer in express\n  key:          'express.sid',       // the name of the cookie where express/connect stores its session_id\n  secret:       'session_secret',    // the session_secret to parse the cookie\n  store:        sessionStore,        // we NEED to use a sessionstore. no memorystore please\n  success:      onAuthorizeSuccess,  // *optional* callback on success - read more below\n  fail:         onAuthorizeFail,     // *optional* callback on fail/error - read more below\n}));\n\nfunction onAuthorizeSuccess(data, accept){\n  console.log('successful connection to socket.io');\n\n  // The accept-callback still allows us to decide whether to\n  // accept the connection or not.\n  accept(null, true);\n\n  // OR\n\n  // If you use socket.io@1.X the callback looks different\n  accept();\n}\n\nfunction onAuthorizeFail(data, message, error, accept){\n  if(error)\n    throw new Error(message);\n  console.log('failed connection to socket.io:', message);\n\n  // We use this callback to log all of our failed connections.\n  accept(null, false);\n\n  // OR\n\n  // If you use socket.io@1.X the callback looks different\n  // If you don't want to accept the connection\n  if(error)\n    accept(new Error(message));\n  // this error will be sent to the user as a special error-package\n  // see: http://socket.io/docs/client-api/#socket > error-object\n}\n```\n\n## passport.socketio - Options\n\n### `store` [function] **required**:\n*Always* provide one. If you don't know what sessionStore to use, have a look at [this list](https://github.com/senchalabs/connect/wiki#session-stores).\nAlso be sure to use the same sessionStore or at least a connection to *the same collection/table/whatever*. And don't forget your `express.session()` middleware:\n`app.use(express.session({ store: awesomeSessionStore }));`\nFor further info about this middleware see [the official documentation](http://www.senchalabs.org/connect/session.html#session).\n\nYou can also check the simple example below using a redis store.\n\n```javascript\n//in your app.js\nvar sessionStore = new redisStore();\n\napp.use(session({\n  key: 'express.sid',\n  store: sessionStore,\n  secret: 'keyboard cat'\n}));\n\n//in your passport.socketio setup\n//With Socket.io >= 1.0 (you will have the same setup for Socket.io <1)\nio.use(passportSocketIo.authorize({\n  cookieParser: require('cookie-parser'), //optional your cookie-parser middleware function. Defaults to require('cookie-parser')\n  key:          'express.sid',       //make sure is the same as in your session settings in app.js\n  secret:       'keyboard cat',      //make sure is the same as in your session settings in app.js\n  store:        sessionStore,        //you need to use the same sessionStore you defined in the app.use(session({... in app.js\n  success:      onAuthorizeSuccess,  // *optional* callback on success\n  fail:         onAuthorizeFail,     // *optional* callback on fail/error\n}));\n\n```\n\n### `cookieParser` [function] **optional**:\nOptional cookieParser from express. Express 3 is `express.cookieParser` in Express 4 `require('cookie-parser')`.\n\nDefaults to `require('cookie-parser')`.\n\n### `key` [string] **optional**:\nDefaults to `'connect.sid'`. But you're always better of to be sure and set your own key. Don't forget to also change it in your `express.session()`:\n`app.use(express.session({ key: 'your.sid-key' }));`\n\n### `secret` [string] **optional**:\nAs with `key`, also the secret you provide is optional. *But:* be sure to have one. That's always safer. You can set it like the key:\n`app.use(express.session({ secret: 'pinkie ate my cupcakes!' }));`\n\n### `passport` [function] **optional**:\nDefaults to `require('passport')`. If you want, you can provide your own instance of passport for whatever reason.\n\n### `success` [function] **optional**:\nCallback which will be called everytime a *authorized* user successfuly connects to your socket.io instance. **Always** be sure to accept/reject the connection.\nFor that, there are two parameters: `function(data[object], accept[function])`. `data` contains all the user-information from passport.\nThe second parameter is for accepting/rejecting connections. Use it like this if you use socket.io under 1.0:\n```javascript\n// accept connection\naccept(null, true);\n\n// reject connection (for whatever reason)\naccept(null, false);\n\n\n```\n\nAnd like this if you use the newest version of socket.io@1.X\n```javascript\n// accept connection\naccept();\n\n// reject connection (for whatever reason)\naccept(new Error('optional reason'));\n\n\n```\n\n\n### `fail` [function] **optional**:\nThe name of this callback may be a little confusing. While it is called when a not-authorized-user connects, it is also called when there's a error.\nFor debugging reasons you are provided with two additional parameters `function(data[object], message[string], error[bool], accept[function])`: (socket.io @ < 1.X)\n```javascript\n/* ... */\nfunction onAuthorizeFail(data, message, error, accept){\n  // error indicates whether the fail is due to an error or just a unauthorized client\n  if(error){\n    throw new Error(message);\n  } else {\n    console.log(message);\n    // the same accept-method as above in the success-callback\n    accept(null, false);\n  }\n}\n\n// or\n// This function accepts every client unless there's an error\nfunction onAuthorizeFail(data, message, error, accept){\n  console.log(message);\n  accept(null, !error);\n}\n```\n\nSocket.io@1.X:\n```javascript\nfunction onAuthorizeFail(data, message, error, accept){\n  // error indicates whether the fail is due to an error or just a unauthorized client\n  if(error)  throw new Error(message);\n  // send the (not-fatal) error-message to the client and deny the connection\n  return accept(new Error(message));\n}\n\n// or\n// This function accepts every client unless there's an critical error\nfunction onAuthorizeFail(data, message, error, accept){\n  if(error)  throw new Error(message);\n  return accept();\n}\n```\n\n\nYou can use the `message` parameter for debugging/logging/etc uses.\n\n## `socket.handshake.user` (prior to v1)\nThis property was removed in v1. See `socket.request.user`\n\n## `socket.request.user` (as of v1)\nThis property is always available from inside a `io.on('connection')` handler. If the user is authorized via passport, you can access all the properties from there.\n**Plus** you have the `socket.request.user.logged_in` property which tells you whether the user is currently authorized or not.\n\n**Note:** This property was named socket.handshake.user prior to v1\n\n## Additional methods\n\n### `passportSocketIo.filterSocketsByUser`\nThis function gives you the ability to filter all connected sockets via a user property. Needs two parameters `function(io, function(user))`. Example:\n```javascript\npassportSocketIo.filterSocketsByUser(io, function(user){\n  return user.gender === 'female';\n}).forEach(function(socket){\n  socket.emit('messsage', 'hello, woman!');\n});\n```\n\n## CORS-Workaround:\nIf you happen to have to work with Cross-Origin-Requests (marked by socket.io v0.9 as `handshake.xdomain` and by socket.io v1.0 as `request.xdomain`) then here's a workaround:\n\n### Clientside:\nYou have to provide the session-cookie. If you haven't set a name yet, do it like this: `app.use(express.session({ key: 'your.sid-key' }));`\n```javascript\n// Note: ther's no readCookie-function built in.\n// Get your own in the internetz\nsocket = io.connect('//' + window.location.host, {\n  query: 'session_id=' + readCookie('your.sid-key')\n});\n```\n\n### Serverside:\nNope, there's nothing to do on the server side. Just be sure that the cookies names match.\n\n\n## Notes:\n* Does **NOT** support cookie-based sessions. eg: `express.cookieSession`\n* If the connection fails, check if you are requesting from a client via CORS. Check `socket.handshake.xdomain === true` (`socket.request.xdomain === true` with socket.io v1) as there are no cookies sent. For a workaround look at the code above.\n\n\n## Contribute\nYou are always welcome to open an issue or provide a pull-request!\nAlso check out the unit tests:\n```bash\nnpm test\n```\n\n## License\nLicensed under the MIT-License.\n2012-2013 JosÃ© F. Romaniello.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jfromaniello/passport.socketio/issues"
  },
  "_id": "passport.socketio@3.5.1",
  "dist": {
    "shasum": "0c0eee0970c0436cf5d9cf4087010ce347cd5a2c"
  },
  "_from": "passport.socketio@^3.4.1",
  "_resolved": "https://registry.npmjs.org/passport.socketio/-/passport.socketio-3.5.1.tgz"
}
