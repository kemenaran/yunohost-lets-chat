{
  "name": "helmet-csp",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    }
  ],
  "description": "Content Security Policy middleware.",
  "version": "0.2.1",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "content",
    "security",
    "policy",
    "csp",
    "xss"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/csp.git"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/csp/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "camelize": "1.0.0",
    "lodash": "3.2.0",
    "platform": "1.3.0"
  },
  "devDependencies": {
    "connect": "^3.3.4",
    "mocha": "^2.1.0",
    "supertest": "^0.15.0"
  },
  "readme": "Content Security Policy middleware\n==================================\n\n[![Build Status](https://travis-ci.org/helmetjs/csp.svg?branch=master)](https://travis-ci.org/helmetjs/csp)\n\nContent Security Policy helps prevent unwanted content being injected into your webpages; this can mitigate XSS vulnerabilities, unintended frames, malicious frames, and more. If you want to learn how CSP works, check out the fantastic [HTML5 Rocks guide](http://www.html5rocks.com/en/tutorials/security/content-security-policy/), the [Content Security Policy Reference](http://content-security-policy.com/), and the [Content Security Policy specification](http://www.w3.org/TR/CSP/).\n\nUsage:\n\n```javascript\nvar csp = require('helmet-csp');\n\napp.use(csp({\n  defaultSrc: [\"'self'\", 'default.com'],\n  scriptSrc: ['scripts.com'],\n  styleSrc: ['style.com'],\n  imgSrc: ['img.com'],\n  connectSrc: ['connect.com'],\n  fontSrc: ['font.com'],\n  objectSrc: ['object.com'],\n  mediaSrc: ['media.com'],\n  frameSrc: ['frame.com'],\n  sandbox: ['allow-forms', 'allow-scripts'],\n  reportUri: '/report-violation',\n  reportOnly: false, // set to true if you only want to report errors\n  setAllHeaders: false, // set to true if you want to set all headers\n  disableAndroid: false, // set to true to disable CSP on Android (can be flaky)\n  safari5: false // set to true if you want to force buggy CSP in Safari 5\n}));\n```\n\nYou can specify keys in a camel-cased fashion (`imgSrc`) or dashed (`img-src`); they are equivalent.\n\nThere are a lot of inconsistencies in how browsers implement CSP. Helmet sniffs the user-agent of the browser and sets the appropriate header and value for that browser. If no user-agent is matched, it will set _all_ the headers with the 1.0 spec.\n\n*Note*: If you're using the `reportUri` feature and you're using [csurf](https://github.com/expressjs/csurf), you might have errors. [Check this out](https://github.com/expressjs/csurf/issues/20) for a workaround.\n",
  "readmeFilename": "README.md",
  "_id": "helmet-csp@0.2.1",
  "dist": {
    "shasum": "112d52787121f5089c89a8dc37e8de545ad572b9"
  },
  "_from": "helmet-csp@0.2.1",
  "_resolved": "https://registry.npmjs.org/helmet-csp/-/helmet-csp-0.2.1.tgz"
}
