{
  "name": "hsts",
  "author": {
    "name": "Adam Baldwin",
    "email": "baldwin@andyet.net",
    "url": "http://andyet.net/team/baldwin"
  },
  "contributors": [
    {
      "name": "Evan Hahn",
      "email": "me@evanhahn.com",
      "url": "http://evanhahn.com"
    }
  ],
  "description": "HTTP Strict Transport Security middleware.",
  "version": "0.1.0",
  "keywords": [
    "helmet",
    "security",
    "express",
    "connect",
    "hsts",
    "https"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/helmetjs/hsts.git"
  },
  "bugs": {
    "url": "https://github.com/helmetjs/hsts/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "mocha": "^2.0.1",
    "sinon": "^1.11.1"
  },
  "dependencies": {
    "underscore": "1.7.0"
  },
  "readme": "# HTTP Strict Transport Security middlware\n\n**Trying to prevent:** Users viewing your site on HTTP instead of HTTPS. HTTP is pretty insecure.\n\n**How this mitigates this:** This middleware adds the `Strict-Transport-Security` header to the response. This tells browsers, \"hey, only use HTTPS for the next period of time\". ([See the spec](http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec-04) for more.)\n\nThis will set the Strict Transport Security header, telling browsers to visit by HTTPS for the next ninety days:\n\n```javascript\nvar hsts = require('hsts');\n\nvar ninetyDaysInMilliseconds = 7776000000;\napp.use(hsts({ maxAge: ninetyDaysInMilliseconds }));\n```\n\nYou can also include subdomains. If this is set on *example.com*, supported browsers will also use HTTPS on *my-subdomain.example.com*. Here's how you do that:\n\n```javascript\napp.use(hsts({\n  maxAge: 123000,\n  includeSubdomains: true\n}));\n```\n\nChrome lets you submit your site for baked-into-Chrome HSTS by adding `preload` to the header. You can add that with the following code, and then submit your site to the Chrome team at [hstspreload.appspot.com](https://hstspreload.appspot.com/).\n\n```javascript\napp.use(hsts({\n  maxAge: 10886400000,     // Must be at least 18 weeks to be approved by Google\n  includeSubdomains: true, // Must be enabled to be approved by Google\n  preload: true\n}));\n```\n\nThis'll be set if `req.secure` is true, a boolean auto-populated by Express. If you're not using Express, that value won't necessarily be set, so you have two options:\n\n```javascript\n// Set the header based on conditions\napp.use(hsts({\n  maxAge: 1234000,\n  setIf: function(req, res) {\n    return Math.random() < 0.5;\n  }\n}));\n\n// ALWAYS set the header\napp.use(hsts({\n  maxAge: 1234000,\n  force: true\n}));\n```\n\nNote that the max age is in milliseconds, even though the spec uses seconds. This will round to the nearest full second.\n\n**Limitations:** This only works if your site actually has HTTPS. It won't tell users on HTTP to *switch* to HTTPS, it will just tell HTTPS users to stick around. You can enforce this with the [express-enforces-ssl](https://github.com/aredo/express-enforces-ssl) module. It's [somewhat well-supported by browsers](http://caniuse.com/#feat=stricttransportsecurity).\n",
  "readmeFilename": "README.md",
  "_id": "hsts@0.1.0",
  "dist": {
    "shasum": "017f7c101cf3714f4bb00115ed8c6db9b4064a5e"
  },
  "_from": "hsts@0.1.0",
  "_resolved": "https://registry.npmjs.org/hsts/-/hsts-0.1.0.tgz"
}
