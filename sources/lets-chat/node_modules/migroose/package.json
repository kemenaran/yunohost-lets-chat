{
  "name": "migroose",
  "version": "0.2.1",
  "description": "migration framework for mongoosejs and MongoDB",
  "main": "migroose/index.js",
  "scripts": {
    "test": "grunt jasmine_node"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/derickbailey/migroose"
  },
  "keywords": [
    "mongodb",
    "mongoosejs",
    "migrate",
    "migration",
    "database",
    "structure",
    "collections"
  ],
  "author": {
    "name": "Derick Bailey"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/derickbailey/migroose/issues"
  },
  "homepage": "https://github.com/derickbailey/migroose",
  "devDependencies": {
    "bcrypt": "^0.8.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-jasmine-node": "^0.2.1",
    "node-jasmine-async": "^0.1.0",
    "mongoose": "^3.8.21"
  },
  "dependencies": {
    "rsvp": "^3.0.16",
    "underscore": "^1.7.0"
  },
  "readme": "# Migroose: MongoDB Migrations\n\nMigroose provides database / data-structure migrations for MongoDB, with NodeJS and MongooseJS \nmodels / schemas.\n\nChanging your document structure in MongoDB is no different than changing a table structure\nin a relational database, when it comes to migrating data. The migration needs to be done - \nyou need your new data structure to be populated with the data from the old structure.\n\nMigroose will help you get there by providing a structure and framework in which you can\nmigrate from your old MongoDB collections and document structures, in to your new one.\n\n## Getting Started\n\nStart by installing migroose in your project:\n\n```\nnpm install --save migroose\nnpm install -g migroose-cli\n```\n\n### Create A Migration Script\n\nTo create a migration, you will want to use [migroose-cli](https://github.com/derickbailey/migroose-cli).\nThis is a command line tool to generate and run you migrations.\n\n```\nmigroose some example migration\n```\n\nThis will create a `mongrations/########-some-example-migration.js` file\nwhere \"########\" is a timestamp. The contents of this file will\nbe a barebones migration that does nothing more than a console.log.\n\nThe migration will also have an ID passed in to the Migration constructor\nfunction. This is used to ensure idempotency within a given \ndatabase / system. Running a migration more than once will only \ndo the work once, based on the ID.\n\n### Load Previous Data Structures\n\nIf you are migrating away from an old data structure, and no longer have a\nmodel that represents this structure, you can use the data load feature.\n\nAfter creating a migration instance, call the `.load` method, passing in an\nobject literal with key / value pairs. The key will be used to reference the\ndata that is returned. The value will be the name of the collection from which\ndata is loaded.\n\n```js\nmigration.load({\n  someData: \"somecollection\",\n  moreData: {\n    collection: \"anothercollection\",\n    query: {someField: \"some value\"}\n  }\n});\n```\n\nWhen the migration is run, each of the collections specified in the `.load`\nconfiguration will result in a data set being made made available to the steps.\n\nIf you need to limit the data that is loaded, from within a given collection,\nyou can specify any standard MongooseJS query, as shown in the above example.\nIf you do not need to limit the data returned, and want to retrieve the entire\ncollection, specifying the collection name directly will do that.\n\n### Run Migration Steps\n\nNow that you have a migration and have optionally specified a collection of\ndocuments to load, you can define steps for your migration. Any given migration\ncan be built with 1 or more steps, using the `.step` method. This method receives\na single argument of a callback function. The callback function receives a\n`data` parameter, and a `stepComplete` function parameter.\n\nThe `data` parameter will contain the named collections that were previously\ndefined by the `load` configuration.\n\nWhen your step is complete, call the `stepComplete()` function.\n\nThe step definition function is where you will do the real work of transforming\nyour previous collection and document structure, in to your new MongooseJS\nmodel structure. Be sure to require any MongooseJS model you need, so that you\ncan manipulate the data correctly.\n\n```js\nvar MyModel = require(\"./models/myModel\");\n\nmigration.step(function(data, stepComplete){\n\n  var oldData = data.moreData[0];\n\n  var myModel = new MyModel({\n    something: oldData.something,\n    newThing: { \n      what: oldData.old1,\n      ever: + oldData.old\n    },\n    otherThing: oldData.moreStuff\n  });\n\n  myModel.save(function(err){\n    if (err) { return stepComplete(err); }\n\n    stepComplete();\n  });\n});\n\nmigration.step(function(data, stepComplete){\n  // handle more steps for this migration, here\n  // ...\n\n  stepComplete();\n});\n```\n\nIn this example, a single model will be retrieved form the `moreData` collection\nthat was previously loaded. This model is used to create a new model, which is\nthen saved. After saving the model, the step is completed.\n\nA second step is also defined in this example. Steps are run in the order in\nwhich they are defined in the file. This allows you to have multiple steps that\npotentially deal with multiple collections, or to have processes that are \na little more involved be split apart.\n\n### Remove Old Data\n\nHaving migrated your data, you may wish to remove data from old collections (models)\nfrom your database. This can be with the `remove` configuration, which works\nthe same was as the `load` configuration.\n\n```js\nmigration.remove({\n  someData: \"somecollection\",\n  moreData: {\n    collection: \"anothercollection\",\n    query: {someField: \"some value\"}\n  }\n});\n```\n\nIn this example, both the `somecollection` and `anothercollection` document\ncollections are removed from the database. In the case of `somecollection`,\nall documents are removed. In the case of `anothercollection`, however, only\ndocuments that match the query will be removed.\n\nNote that the query for removing data can be any valid MongooseJS query, the\nsame as the `load` feature.\n\n### Drop Old Collections\n\nIf you are completely removing a collection from your database, you may wish\nto drop the collection entirely after migrating data out of it. To do that, \nyou can specify a `drop` configuration with a list of collections.\n\n```js\nmigration.drop(\"somethings\", \"otherthings\", \"etcthings\");\n```\n\nDrops will run last in the migration process.\n\n### Run The Migration\n\nHaving written this complete script, you can now run the migroose\ncommand line with no parameters, to execute your migrations.\n\nPlease see the [migroose-cli documentation](https://github.com/derickbailey/migroose-cli)\nfor information on how to configure the migroose-cli tool and connect it to your database.\n\nOnce you have connected migroose to your database, you can use the migroose command line\ntool to run your migrations:\n\n```\nmigroose\n```\n\nThis will run the migrations that you have created, and not yet run. Running\nmigrations mutliple times will result in the work being done only once,\ndue to the ID passed in to the Migration constructor.\n\n### View Prevously Run Migrations\n\nIf you would like to view the list of migrations that have been run on your\napp instance, you can do that in two different ways.\n\n0. Run the `Migroose.MigrationModel.find` method\n0. Examine the `migroosemigrations` collection directly\n\nTo run the MigrationModel's find method, require Migroose in your script\nand then execute the find method as you would any other MongooseJS model find\nmethod.\n\n```js\nvar Migroose = require(\"migroose\");\n\nMigroose.MigrationModel.find(function(err, migrations){\n  if (err) { throw err; }\n\n  console.log(migrations);\n});\n```\n\nThis will print out a list of all migrations that have been run in the\ncurrent app database. You are free to use any MongooseJS methods to find\nMigrations, using the MigrationModel - it is a standard MongooseJS model / \nschema.\n\nIf you wish to examine the `migrootions` collection in your MongoDB\ninstance directly, you may do this however you wish. It will show you the same\ninformation as the MigrationModel.find method.\n\n## Legal Junk\n\nMigroose is &copy;2015 Muted Solutions, LLC. All Rights Reserved.\n\nYou may distribute and use Migroose under the [MIT License](http://mutedsolutions.mit-license.org).\n",
  "readmeFilename": "readme.md",
  "_id": "migroose@0.2.1",
  "dist": {
    "shasum": "814c3b90fc101e43947a7f131eca39082ee3fa80"
  },
  "_from": "migroose@^0.2.1",
  "_resolved": "https://registry.npmjs.org/migroose/-/migroose-0.2.1.tgz"
}
